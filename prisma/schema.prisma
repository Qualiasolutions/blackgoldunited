// BlackGoldUnited ERP System Database Schema
// This schema defines the complete database structure for all 14 modules
// with role-based access control and audit trail capabilities

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// AUDIT TRAIL AND BASE MODELS
// ============================================================================

// Audit trail fields mixin for financial and critical tables
model AuditLog {
  id          String   @id @default(cuid())
  tableName   String
  recordId    String
  action      String   // CREATE, UPDATE, DELETE
  oldData     Json?
  newData     Json?
  userId      String
  timestamp   DateTime @default(now())
  ipAddress   String?
  userAgent   String?

  user User @relation(fields: [userId], references: [id])

  @@index([tableName, recordId])
  @@index([userId])
  @@index([timestamp])
  @@map("audit_logs")
}

// ============================================================================
// USER MANAGEMENT AND ACCESS CONTROL
// ============================================================================

enum UserRole {
  MANAGEMENT     // Full access to all categories
  FINANCE_TEAM   // Full access to Finance, Read-only to Contracts/Procurement
  PROCUREMENT_BD // Full access to Procurement & Projects, Read-only to Finance
  ADMIN_HR       // Full access to HR & Admin, Limited read-only to others
  IMS_QHSE       // Full access to IMS/Compliance, Limited access to Operations
}

enum AccessLevel {
  FULL     // Full CRUD access
  READ     // Read-only access
  NONE     // No access
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  username    String?   @unique
  firstName   String
  lastName    String
  role        UserRole
  isActive    Boolean   @default(true)
  lastLogin   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Password and security
  passwordHash String
  resetToken   String?
  resetTokenExpiry DateTime?
  emailVerified Boolean @default(false)
  emailVerificationToken String?

  // Relationships
  employee    Employee? @relation(fields: [employeeId], references: [id])
  employeeId  String?   @unique

  // Audit trails
  auditLogs   AuditLog[]
  createdInvoices Invoice[] @relation("InvoiceCreatedBy")
  createdPurchaseOrders PurchaseOrder[] @relation("PurchaseOrderCreatedBy")
  createdExpenses Expense[] @relation("ExpenseCreatedBy")
  createdJournalEntries JournalEntry[] @relation("JournalEntryCreatedBy")

  @@index([email])
  @@index([role])
  @@map("users")
}

model Permission {
  id       String      @id @default(cuid())
  role     UserRole
  module   String      // e.g., "sales", "finance", "inventory"
  action   String      // e.g., "create", "read", "update", "delete"
  access   AccessLevel

  @@unique([role, module, action])
  @@map("permissions")
}

// ============================================================================
// 1. SALES MODULE
// ============================================================================

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PARTIAL
  COMPLETED
  FAILED
  REFUNDED
}

model Client {
  id            String    @id @default(cuid())
  clientCode    String    @unique
  companyName   String
  contactPerson String?
  email         String?
  phone         String?
  mobile        String?
  address       String?
  city          String?
  state         String?
  country       String?
  postalCode    String?
  taxNumber     String?
  creditLimit   Decimal?  @db.Decimal(15, 2)
  paymentTerms  Int?      // Days
  isActive      Boolean   @default(true)
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  // Relationships
  contacts      Contact[]
  invoices      Invoice[]
  rfqs          RFQ[]
  payments      Payment[]
  creditNotes   CreditNote[]

  @@index([clientCode])
  @@index([companyName])
  @@map("clients")
}

model Contact {
  id          String    @id @default(cuid())
  clientId    String
  firstName   String
  lastName    String
  title       String?
  email       String?
  phone       String?
  mobile      String?
  department  String?
  isPrimary   Boolean   @default(false)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([email])
  @@map("contacts")
}

model Invoice {
  id              String        @id @default(cuid())
  invoiceNumber   String        @unique
  clientId        String
  issueDate       DateTime      @default(now())
  dueDate         DateTime
  status          InvoiceStatus @default(DRAFT)
  paymentStatus   PaymentStatus @default(PENDING)
  subtotal        Decimal       @db.Decimal(15, 2) 
  taxAmount       Decimal       @db.Decimal(15, 2) 
  discountAmount  Decimal       @db.Decimal(15, 2) @default(0) 
  totalAmount     Decimal       @db.Decimal(15, 2) 
  paidAmount      Decimal       @db.Decimal(15, 2) @default(0) 
  notes           String?
  terms           String?
  isRecurring     Boolean       @default(false)
  recurringPeriod Int?          // Days
  nextRecurringDate DateTime?
  createdById     String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?

  // Relationships
  client      Client        @relation(fields: [clientId], references: [id])
  createdBy   User          @relation("InvoiceCreatedBy", fields: [createdById], references: [id])
  items       InvoiceItem[]
  payments    Payment[]
  creditNotes CreditNote[]

  @@index([invoiceNumber])
  @@index([clientId])
  @@index([status])
  @@index([dueDate])
  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  productId   String?
  description String
  quantity    Decimal 
  unitPrice   Decimal 
  lineTotal   Decimal 
  taxRate     Decimal @default(0) 

  invoice Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])

  @@index([invoiceId])
  @@map("invoice_items")
}

model RFQ {
  id          String    @id @default(cuid())
  rfqNumber   String    @unique
  clientId    String
  title       String
  description String?
  issueDate   DateTime  @default(now())
  validUntil  DateTime
  status      String    @default("DRAFT") // DRAFT, SENT, QUOTED, ACCEPTED, REJECTED
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  client Client    @relation(fields: [clientId], references: [id])
  items  RFQItem[]

  @@index([rfqNumber])
  @@index([clientId])
  @@map("rfqs")
}

model RFQItem {
  id          String  @id @default(cuid())
  rfqId       String
  productId   String?
  description String
  quantity    Decimal 
  unitPrice   Decimal? 

  rfq     RFQ      @relation(fields: [rfqId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])

  @@index([rfqId])
  @@map("rfq_items")
}

model Payment {
  id            String        @id @default(cuid())
  paymentNumber String        @unique
  clientId      String
  invoiceId     String?
  amount        Decimal       @db.Decimal(15, 2) 
  paymentDate   DateTime      @default(now())
  paymentMethod String        // CASH, BANK_TRANSFER, CREDIT_CARD, CHECK
  reference     String?
  status        PaymentStatus @default(PENDING)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  client  Client   @relation(fields: [clientId], references: [id])
  invoice Invoice? @relation(fields: [invoiceId], references: [id])

  @@index([clientId])
  @@index([invoiceId])
  @@index([paymentDate])
  @@map("payments")
}

model CreditNote {
  id              String   @id @default(cuid())
  creditNoteNumber String   @unique
  clientId        String
  invoiceId       String?
  amount          Decimal  
  reason          String
  issueDate       DateTime @default(now())
  status          String   @default("PENDING") // PENDING, APPLIED, CANCELLED
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  client  Client   @relation(fields: [clientId], references: [id])
  invoice Invoice? @relation(fields: [invoiceId], references: [id])

  @@index([clientId])
  @@index([invoiceId])
  @@map("credit_notes")
}

// ============================================================================
// 2. INVENTORY MODULE
// ============================================================================

enum ProductType {
  PRODUCT
  SERVICE
}

enum StockMovementType {
  IN
  OUT
  ADJUSTMENT
  TRANSFER
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  parentId    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@index([name])
  @@map("categories")
}

model Product {
  id            String      @id @default(cuid())
  productCode   String      @unique
  name          String
  description   String?
  type          ProductType @default(PRODUCT)
  categoryId    String?
  unit          String      // kg, pcs, ltr, etc.
  costPrice     Decimal?    
  sellingPrice  Decimal     
  minStock      Decimal?    
  maxStock      Decimal?    
  reorderLevel  Decimal?    
  isActive      Boolean     @default(true)
  isTaxable     Boolean     @default(true)
  taxRate       Decimal?    @default(0) 
  barcode       String?
  sku           String?
  weight        Decimal?    
  dimensions    String?     // JSON string for length, width, height
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?

  category        Category?         @relation(fields: [categoryId], references: [id])
  stocks          Stock[]
  stockMovements  StockMovement[]
  priceListItems  PriceListItem[]
  invoiceItems    InvoiceItem[]
  rfqItems        RFQItem[]
  requisitionItems RequisitionItem[]
  purchaseOrderItems PurchaseOrderItem[]

  @@index([productCode])
  @@index([name])
  @@index([categoryId])
  @@map("products")
}

model Warehouse {
  id          String    @id @default(cuid())
  code        String    @unique
  name        String
  location    String?
  address     String?
  managerId   String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  manager        Employee?       @relation(fields: [managerId], references: [id])
  stocks         Stock[]
  stockMovements StockMovement[]

  @@index([code])
  @@index([name])
  @@map("warehouses")
}

model Stock {
  id          String  @id @default(cuid())
  productId   String
  warehouseId String
  quantity    Decimal 
  reservedQty Decimal @default(0) 
  updatedAt   DateTime @updatedAt

  product   Product   @relation(fields: [productId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])

  @@unique([productId, warehouseId])
  @@index([productId])
  @@index([warehouseId])
  @@map("stocks")
}

model StockMovement {
  id          String            @id @default(cuid())
  productId   String
  warehouseId String
  type        StockMovementType
  quantity    Decimal       @db.Decimal(15, 2)     
  reference   String?           // Invoice number, PO number, etc.
  notes       String?
  createdAt   DateTime          @default(now())

  product   Product   @relation(fields: [productId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])

  @@index([productId])
  @@index([warehouseId])
  @@index([createdAt])
  @@map("stock_movements")
}

model PriceList {
  id          String    @id @default(cuid())
  name        String
  description String?
  validFrom   DateTime
  validTo     DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  items PriceListItem[]

  @@index([name])
  @@map("price_lists")
}

model PriceListItem {
  id          String  @id @default(cuid())
  priceListId String
  productId   String
  price       Decimal 

  priceList PriceList @relation(fields: [priceListId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id])

  @@unique([priceListId, productId])
  @@map("price_list_items")
}

model Requisition {
  id              String    @id @default(cuid())
  requisitionNumber String   @unique
  requestedById   String
  departmentId    String?
  requestDate     DateTime  @default(now())
  requiredDate    DateTime
  status          String    @default("PENDING") // PENDING, APPROVED, REJECTED, FULFILLED
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  requestedBy Employee?         @relation(fields: [requestedById], references: [id])
  department  Department?       @relation(fields: [departmentId], references: [id])
  items       RequisitionItem[]

  @@index([requisitionNumber])
  @@index([requestedById])
  @@map("requisitions")
}

model RequisitionItem {
  id            String  @id @default(cuid())
  requisitionId String
  productId     String
  quantity      Decimal 
  notes         String?

  requisition Requisition @relation(fields: [requisitionId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id])

  @@index([requisitionId])
  @@map("requisition_items")
}

// ============================================================================
// 3. PURCHASE MODULE
// ============================================================================

enum PurchaseOrderStatus {
  DRAFT
  SENT
  CONFIRMED
  RECEIVED
  CANCELLED
}

model Supplier {
  id              String    @id @default(cuid())
  supplierCode    String    @unique
  companyName     String
  contactPerson   String?
  email           String?
  phone           String?
  mobile          String?
  address         String?
  city            String?
  state           String?
  country         String?
  postalCode      String?
  taxNumber       String?
  paymentTerms    Int?      // Days
  creditLimit     Decimal?  
  isActive        Boolean   @default(true)
  rating          Int?      @default(0) // 1-5 stars
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  purchaseOrders   PurchaseOrder[]
  purchaseInvoices PurchaseInvoice[]
  supplierPayments SupplierPayment[]
  debitNotes       DebitNote[]

  @@index([supplierCode])
  @@index([companyName])
  @@map("suppliers")
}

model PurchaseOrder {
  id              String              @id @default(cuid())
  poNumber        String              @unique
  supplierId      String
  orderDate       DateTime            @default(now())
  expectedDate    DateTime
  status          PurchaseOrderStatus @default(DRAFT)
  subtotal        Decimal       @db.Decimal(15, 2)       
  taxAmount       Decimal       @db.Decimal(15, 2)       
  totalAmount     Decimal       @db.Decimal(15, 2)       
  notes           String?
  terms           String?
  createdById     String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  deletedAt       DateTime?

  supplier   Supplier            @relation(fields: [supplierId], references: [id])
  createdBy  User                @relation("PurchaseOrderCreatedBy", fields: [createdById], references: [id])
  items      PurchaseOrderItem[]
  invoices   PurchaseInvoice[]

  @@index([poNumber])
  @@index([supplierId])
  @@index([status])
  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id          String  @id @default(cuid())
  poId        String
  productId   String
  description String
  quantity    Decimal 
  unitPrice   Decimal 
  lineTotal   Decimal 
  receivedQty Decimal @default(0) 

  purchaseOrder PurchaseOrder @relation(fields: [poId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id])

  @@index([poId])
  @@map("purchase_order_items")
}

model PurchaseInvoice {
  id              String   @id @default(cuid())
  invoiceNumber   String   @unique
  supplierId      String?
  purchaseOrderId String?
  invoiceDate     DateTime @default(now())
  dueDate         DateTime
  subtotal        Decimal  
  taxAmount       Decimal  
  totalAmount     Decimal  
  paidAmount      Decimal  @default(0) 
  status          String   @default("PENDING") // PENDING, PAID, OVERDUE
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  supplier      Supplier?     @relation(fields: [supplierId], references: [id])
  purchaseOrder PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  payments      SupplierPayment[]

  @@index([invoiceNumber])
  @@index([supplierId])
  @@map("purchase_invoices")
}

model SupplierPayment {
  id                String           @id @default(cuid())
  paymentNumber     String           @unique
  supplierId        String
  purchaseInvoiceId String?
  amount            Decimal       @db.Decimal(15, 2)    
  paymentDate       DateTime         @default(now())
  paymentMethod     String           // CASH, BANK_TRANSFER, CHECK
  reference         String?
  status            PaymentStatus    @default(PENDING)
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  supplier        Supplier         @relation(fields: [supplierId], references: [id])
  purchaseInvoice PurchaseInvoice? @relation(fields: [purchaseInvoiceId], references: [id])

  @@index([supplierId])
  @@index([purchaseInvoiceId])
  @@map("supplier_payments")
}

model DebitNote {
  id              String   @id @default(cuid())
  debitNoteNumber String   @unique
  supplierId      String
  amount          Decimal  
  reason          String
  issueDate       DateTime @default(now())
  status          String   @default("PENDING") // PENDING, APPLIED, CANCELLED
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  supplier Supplier @relation(fields: [supplierId], references: [id])

  @@index([supplierId])
  @@map("debit_notes")
}

// ============================================================================
// 4. FINANCE MODULE
// ============================================================================

enum TransactionType {
  INCOME
  EXPENSE
}

model BankAccount {
  id            String    @id @default(cuid())
  accountName   String
  accountNumber String    @unique
  bankName      String
  branchName    String?
  swiftCode     String?
  iban          String?
  currency      String    @default("USD")
  balance       Decimal   @default(0) 
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  transactions BankTransaction[]

  @@index([accountNumber])
  @@map("bank_accounts")
}

model BankTransaction {
  id            String          @id @default(cuid())
  bankAccountId String
  type          TransactionType
  amount        Decimal       @db.Decimal(15, 2)   
  description   String
  reference     String?
  transactionDate DateTime      @default(now())
  createdAt     DateTime        @default(now())

  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id])

  @@index([bankAccountId])
  @@index([transactionDate])
  @@map("bank_transactions")
}

model Expense {
  id              String   @id @default(cuid())
  expenseNumber   String   @unique
  categoryId      String?
  amount          Decimal  
  description     String
  expenseDate     DateTime @default(now())
  paymentMethod   String   // CASH, BANK_TRANSFER, CREDIT_CARD
  vendorName      String?
  receipt         String?  // File path
  status          String   @default("PENDING") // PENDING, APPROVED, REJECTED, PAID
  notes           String?
  createdById     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  category  ExpenseCategory? @relation(fields: [categoryId], references: [id])
  createdBy User             @relation("ExpenseCreatedBy", fields: [createdById], references: [id])

  @@index([expenseNumber])
  @@index([categoryId])
  @@index([expenseDate])
  @@map("expenses")
}

model ExpenseCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  expenses Expense[]

  @@map("expense_categories")
}

model Income {
  id            String   @id @default(cuid())
  incomeNumber  String   @unique
  categoryId    String?
  amount        Decimal  
  description   String
  incomeDate    DateTime @default(now())
  source        String?
  reference     String?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category IncomeCategory? @relation(fields: [categoryId], references: [id])

  @@index([incomeNumber])
  @@index([categoryId])
  @@index([incomeDate])
  @@map("incomes")
}

model IncomeCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  incomes Income[]

  @@map("income_categories")
}

// ============================================================================
// 5. ACCOUNTING MODULE
// ============================================================================

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

model ChartOfAccounts {
  id            String      @id @default(cuid())
  accountCode   String      @unique
  accountName   String
  accountType   AccountType
  parentId      String?
  balance       Decimal     @default(0) 
  isActive      Boolean     @default(true)
  description   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  parent        ChartOfAccounts?   @relation("AccountHierarchy", fields: [parentId], references: [id])
  children      ChartOfAccounts[]  @relation("AccountHierarchy")
  journalEntries JournalEntryLine[]

  @@index([accountCode])
  @@index([accountType])
  @@map("chart_of_accounts")
}

model JournalEntry {
  id              String   @id @default(cuid())
  journalNumber   String   @unique
  entryDate       DateTime @default(now())
  description     String
  reference       String?
  totalDebit      Decimal  
  totalCredit     Decimal  
  status          String   @default("DRAFT") // DRAFT, POSTED, REVERSED
  createdById     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  createdBy User               @relation("JournalEntryCreatedBy", fields: [createdById], references: [id])
  lines     JournalEntryLine[]

  @@index([journalNumber])
  @@index([entryDate])
  @@map("journal_entries")
}

model JournalEntryLine {
  id              String  @id @default(cuid())
  journalEntryId  String
  accountId       String
  description     String?
  debitAmount     Decimal @default(0) 
  creditAmount    Decimal @default(0) 

  journalEntry JournalEntry      @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  account      ChartOfAccounts   @relation(fields: [accountId], references: [id])

  @@index([journalEntryId])
  @@index([accountId])
  @@map("journal_entry_lines")
}

model CostCenter {
  id          String    @id @default(cuid())
  code        String    @unique
  name        String
  description String?
  managerId   String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  manager Employee? @relation(fields: [managerId], references: [id])

  @@index([code])
  @@map("cost_centers")
}

model Asset {
  id                String   @id @default(cuid())
  assetCode         String   @unique
  name              String
  description       String?
  categoryId        String?
  purchaseDate      DateTime
  purchasePrice     Decimal  
  currentValue      Decimal  
  depreciationRate  Decimal? 
  location          String?
  condition         String?  // EXCELLENT, GOOD, FAIR, POOR
  serialNumber      String?
  warrantyExpiry    DateTime?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  category AssetCategory? @relation(fields: [categoryId], references: [id])

  @@index([assetCode])
  @@index([categoryId])
  @@map("assets")
}

model AssetCategory {
  id            String    @id @default(cuid())
  name          String    @unique
  description   String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  assets Asset[]

  @@map("asset_categories")
}

// ============================================================================
// 6. EMPLOYEES MODULE
// ============================================================================

model Department {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  managerId   String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  manager      Employee?     @relation("DepartmentManager", fields: [managerId], references: [id])
  employees    Employee[]    @relation("EmployeeDepartment")
  requisitions Requisition[]

  @@index([name])
  @@map("departments")
}

model Designation {
  id          String    @id @default(cuid())
  title       String    @unique
  description String?
  level       Int?      // Hierarchy level
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  employees Employee[]

  @@index([title])
  @@map("designations")
}

model EmployeeLevel {
  id          String    @id @default(cuid())
  levelName   String    @unique
  description String?
  minSalary   Decimal?  
  maxSalary   Decimal?  
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  employees Employee[]

  @@map("employee_levels")
}

model EmploymentType {
  id          String    @id @default(cuid())
  typeName    String    @unique // FULL_TIME, PART_TIME, CONTRACT, INTERN
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  employees Employee[]

  @@map("employment_types")
}

model Employee {
  id                String    @id @default(cuid())
  employeeNumber    String    @unique
  firstName         String
  lastName          String
  email             String?   @unique
  phone             String?
  mobile            String?
  dateOfBirth       DateTime?
  hireDate          DateTime
  terminationDate   DateTime?
  departmentId      String?
  designationId     String?
  employeeLevelId   String?
  employmentTypeId  String?
  managerId         String?
  salary            Decimal?  
  address           String?
  city              String?
  state             String?
  country           String?
  postalCode        String?
  emergencyContact  String?
  emergencyPhone    String?
  taxId             String?
  bankAccount       String?
  isActive          Boolean   @default(true)
  profilePicture    String?
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  // Relationships
  department       Department?      @relation("EmployeeDepartment", fields: [departmentId], references: [id])
  designation      Designation?     @relation(fields: [designationId], references: [id])
  employeeLevel    EmployeeLevel?   @relation(fields: [employeeLevelId], references: [id])
  employmentType   EmploymentType?  @relation(fields: [employmentTypeId], references: [id])
  manager          Employee?        @relation("EmployeeManager", fields: [managerId], references: [id])

  // Reverse relations
  subordinates     Employee[]       @relation("EmployeeManager")
  managedDepartments Department[]   @relation("DepartmentManager")
  managedWarehouses  Warehouse[]
  managedCostCenters CostCenter[]
  user             User?
  attendanceLogs   AttendanceLog[]
  leaveApplications LeaveApplication[]
  contracts        Contract[]
  payslips         Payslip[]
  loans            Loan[]
  requisitions     Requisition[]
  allocatedShifts  AllocatedShift[]

  @@index([employeeNumber])
  @@index([email])
  @@index([departmentId])
  @@index([designationId])
  @@map("employees")
}

// ============================================================================
// 7. ATTENDANCE MODULE
// ============================================================================

model AttendanceLog {
  id          String    @id @default(cuid())
  employeeId  String
  date        DateTime  
  checkIn     DateTime?
  checkOut    DateTime?
  breakStart  DateTime?
  breakEnd    DateTime?
  totalHours  Decimal?  
  overtime    Decimal?  @default(0) 
  status      String    @default("PRESENT") // PRESENT, ABSENT, LATE, HALF_DAY
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, date])
  @@index([employeeId])
  @@index([date])
  @@map("attendance_logs")
}

model Shift {
  id          String    @id @default(cuid())
  name        String    @unique
  startTime   DateTime  
  endTime     DateTime  
  breakDuration Int?    // Minutes
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  allocatedShifts AllocatedShift[]

  @@map("shifts")
}

model AllocatedShift {
  id         String   @id @default(cuid())
  employeeId String
  shiftId    String
  startDate  DateTime 
  endDate    DateTime? 
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())

  employee Employee @relation(fields: [employeeId], references: [id])
  shift    Shift    @relation(fields: [shiftId], references: [id])

  @@index([employeeId])
  @@index([shiftId])
  @@map("allocated_shifts")
}

model LeaveType {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  maxDays     Int?      // Maximum days per year
  carryForward Boolean  @default(false)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  leaveApplications LeaveApplication[]

  @@map("leave_types")
}

model LeaveApplication {
  id          String    @id @default(cuid())
  employeeId  String
  leaveTypeId String
  startDate   DateTime  
  endDate     DateTime  
  totalDays   Int
  reason      String
  status      String    @default("PENDING") // PENDING, APPROVED, REJECTED
  appliedDate DateTime  @default(now())
  approvedBy  String?
  approvedDate DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  employee  Employee  @relation(fields: [employeeId], references: [id])
  leaveType LeaveType @relation(fields: [leaveTypeId], references: [id])

  @@index([employeeId])
  @@index([startDate, endDate])
  @@map("leave_applications")
}

// ============================================================================
// 8. PAYROLL MODULE
// ============================================================================

model Contract {
  id              String    @id @default(cuid())
  employeeId      String
  contractNumber  String    @unique
  startDate       DateTime  
  endDate         DateTime? 
  salary          Decimal   
  currency        String    @default("USD")
  paymentFrequency String   // MONTHLY, WEEKLY, DAILY
  contractType    String    // PERMANENT, TEMPORARY, PROBATION
  terms           String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id])
  payRuns  PayRun[]

  @@index([employeeId])
  @@index([contractNumber])
  @@map("contracts")
}

model SalaryComponent {
  id          String    @id @default(cuid())
  name        String    @unique
  type        String    // EARNING, DEDUCTION
  isFixed     Boolean   @default(true)
  percentage  Decimal?  
  amount      Decimal?  
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  structureComponents SalaryStructureComponent[]
  payRunComponents    PayRunComponent[]

  @@map("salary_components")
}

model SalaryStructure {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  components SalaryStructureComponent[]
  payRuns    PayRun[]

  @@map("salary_structures")
}

model SalaryStructureComponent {
  id                String  @id @default(cuid())
  salaryStructureId String
  componentId       String
  amount            Decimal? 
  percentage        Decimal? 

  salaryStructure SalaryStructure  @relation(fields: [salaryStructureId], references: [id], onDelete: Cascade)
  component       SalaryComponent  @relation(fields: [componentId], references: [id])

  @@unique([salaryStructureId, componentId])
  @@map("salary_structure_components")
}

model PayRun {
  id                String    @id @default(cuid())
  payRunNumber      String    @unique
  contractId        String
  salaryStructureId String?
  payPeriodStart    DateTime  
  payPeriodEnd      DateTime  
  payDate           DateTime  
  grossSalary       Decimal   
  totalDeductions   Decimal   
  netSalary         Decimal   
  status            String    @default("DRAFT") // DRAFT, APPROVED, PAID
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  contract        Contract            @relation(fields: [contractId], references: [id])
  salaryStructure SalaryStructure?    @relation(fields: [salaryStructureId], references: [id])
  components      PayRunComponent[]
  payslip         Payslip?

  @@index([contractId])
  @@index([payPeriodStart, payPeriodEnd])
  @@map("pay_runs")
}

model PayRunComponent {
  id          String  @id @default(cuid())
  payRunId    String
  componentId String
  amount      Decimal 

  payRun    PayRun          @relation(fields: [payRunId], references: [id], onDelete: Cascade)
  component SalaryComponent @relation(fields: [componentId], references: [id])

  @@unique([payRunId, componentId])
  @@map("pay_run_components")
}

model Payslip {
  id          String   @id @default(cuid())
  payRunId    String   @unique
  employeeId  String
  payslipNumber String @unique
  generatedAt DateTime @default(now())
  filePath    String?

  payRun   PayRun   @relation(fields: [payRunId], references: [id])
  employee Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
  @@map("payslips")
}

model Loan {
  id            String    @id @default(cuid())
  employeeId    String
  loanNumber    String    @unique
  amount        Decimal   
  interestRate  Decimal   
  installments  Int
  paidInstallments Int    @default(0)
  monthlyAmount Decimal   
  startDate     DateTime  
  endDate       DateTime  
  status        String    @default("ACTIVE") // ACTIVE, COMPLETED, CANCELLED
  purpose       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
  @@index([loanNumber])
  @@map("loans")
}

// ============================================================================
// 9. TEMPLATES MODULE
// ============================================================================

model Template {
  id          String    @id @default(cuid())
  name        String
  type        String    // INVOICE, QUOTE, PURCHASE_ORDER, etc.
  content     String    // HTML/Template content
  isDefault   Boolean   @default(false)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([type])
  @@map("templates")
}

model Document {
  id          String    @id @default(cuid())
  name        String
  description String?
  filePath    String
  fileSize    Int
  mimeType    String
  category    String?
  tags        String?   // JSON array of tags
  uploadedBy  String?
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([category])
  @@index([name])
  @@map("documents")
}

model TermsConditions {
  id          String    @id @default(cuid())
  title       String
  content     String
  type        String    // SALES, PURCHASE, GENERAL
  version     String    @default("1.0")
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([type])
  @@map("terms_conditions")
}

model AutoReminder {
  id          String    @id @default(cuid())
  name        String
  type        String    // INVOICE_DUE, PAYMENT_OVERDUE, etc.
  triggerDays Int       // Days before/after event
  isActive    Boolean   @default(true)
  subject     String
  message     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([type])
  @@map("auto_reminders")
}

// ============================================================================
// 10. QHSE MODULE
// ============================================================================

model QHSEPolicy {
  id          String    @id @default(cuid())
  title       String
  content     String
  version     String    @default("1.0")
  effectiveDate DateTime 
  reviewDate  DateTime? 
  status      String    @default("DRAFT") // DRAFT, ACTIVE, ARCHIVED
  category    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([status])
  @@index([category])
  @@map("qhse_policies")
}

model QHSEProcedure {
  id          String    @id @default(cuid())
  title       String
  content     String
  version     String    @default("1.0")
  effectiveDate DateTime 
  reviewDate  DateTime? 
  status      String    @default("DRAFT") // DRAFT, ACTIVE, ARCHIVED
  category    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([status])
  @@index([category])
  @@map("qhse_procedures")
}

model QHSEForm {
  id          String    @id @default(cuid())
  title       String
  description String?
  formFields  Json      // JSON structure for form fields
  isActive    Boolean   @default(true)
  category    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  submissions QHSEFormSubmission[]

  @@index([category])
  @@map("qhse_forms")
}

model QHSEFormSubmission {
  id          String    @id @default(cuid())
  formId      String
  submittedBy String
  data        Json      // Form submission data
  status      String    @default("SUBMITTED") // SUBMITTED, REVIEWED, APPROVED
  submittedAt DateTime  @default(now())

  form QHSEForm @relation(fields: [formId], references: [id])

  @@index([formId])
  @@index([submittedBy])
  @@map("qhse_form_submissions")
}

model QHSEReport {
  id          String    @id @default(cuid())
  title       String
  type        String    // INCIDENT, AUDIT, INSPECTION, etc.
  content     String
  reportDate  DateTime  
  status      String    @default("DRAFT") // DRAFT, SUBMITTED, APPROVED
  priority    String?   // LOW, MEDIUM, HIGH, CRITICAL
  assignedTo  String?
  dueDate     DateTime? 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([type])
  @@index([status])
  @@index([reportDate])
  @@map("qhse_reports")
}

// ============================================================================
// 11. SETTINGS MODULE
// ============================================================================

model SystemSetting {
  id          String    @id @default(cuid())
  key         String    @unique
  value       String
  description String?
  category    String?
  isEncrypted Boolean   @default(false)
  updatedAt   DateTime  @updatedAt

  @@index([category])
  @@map("system_settings")
}

model CompanyInfo {
  id              String    @id @default(cuid())
  companyName     String
  registrationNo  String?
  taxId           String?
  address         String?
  city            String?
  state           String?
  country         String?
  postalCode      String?
  phone           String?
  email           String?
  website         String?
  logo            String?   // File path
  currency        String    @default("USD")
  fiscalYearStart Int       @default(1) // Month (1-12)
  timezone        String    @default("UTC")
  dateFormat      String    @default("YYYY-MM-DD")
  timeFormat      String    @default("24")
  updatedAt       DateTime  @updatedAt

  @@map("company_info")
}

